name: Hugo Template Factory Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  HUGO_VERSION: '0.148.0'

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 30

    strategy:
      matrix:
        test-type: [unit, integration, performance]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Setup Hugo
      uses: peaceiris/actions-hugo@v2
      with:
        hugo-version: ${{ env.HUGO_VERSION }}
        extended: true

    - name: Install dependencies
      run: |
        npm ci
        npm run validate

    - name: Verify project structure
      run: |
        echo "üîç Verifying project structure..."
        ls -la
        echo "üìÇ Templates:"
        ls -la templates/
        echo "üé® Themes:"
        ls -la themes/
        echo "üß© Components:"
        ls -la components/

    - name: Run linting
      run: npm run lint

    - name: Run ${{ matrix.test-type }} tests
      run: |
        case "${{ matrix.test-type }}" in
          "unit")
            npm test -- --selectProjects=unit --coverage
            ;;
          "integration")
            npm test -- --selectProjects=integration --verbose
            ;;
          "performance")
            npm test -- --selectProjects=performance --verbose
            ;;
        esac

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.test-type }}
        path: |
          test-results/
          coverage/
        retention-days: 30

    - name: Upload coverage to Codecov
      if: matrix.test-type == 'unit'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    timeout-minutes: 20

    strategy:
      matrix:
        template: [minimal, default]
        theme: [compose]
        include:
          - template: default
            theme: compose
            components: quiz-engine

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup Hugo
      uses: peaceiris/actions-hugo@v2
      with:
        hugo-version: ${{ env.HUGO_VERSION }}
        extended: true

    - name: Test template build
      run: |
        echo "üèóÔ∏è Testing build: ${{ matrix.template }} + ${{ matrix.theme }}"

        COMPONENTS_FLAG=""
        if [ "${{ matrix.components }}" != "" ]; then
          COMPONENTS_FLAG="--components=${{ matrix.components }}"
        fi

        bash scripts/build.sh \
          --template=${{ matrix.template }} \
          --theme=${{ matrix.theme }} \
          $COMPONENTS_FLAG \
          --output=./test-build-${{ matrix.template }} \
          --verbose

    - name: Verify build output
      run: |
        BUILD_DIR="./test-build-${{ matrix.template }}"
        echo "üìã Verifying build output in $BUILD_DIR"

        # Check required files
        if [ ! -f "$BUILD_DIR/hugo.toml" ]; then
          echo "‚ùå hugo.toml not found"
          exit 1
        fi

        if [ ! -d "$BUILD_DIR/content" ]; then
          echo "‚ùå content directory not found"
          exit 1
        fi

        echo "‚úÖ Build verification passed"

    - name: Test Hugo build
      run: |
        BUILD_DIR="./test-build-${{ matrix.template }}"
        cd "$BUILD_DIR"

        echo "üöÄ Testing Hugo build..."
        hugo --minify --gc

        if [ ! -f "public/index.html" ]; then
          echo "‚ùå Hugo build failed - no index.html generated"
          exit 1
        fi

        echo "‚úÖ Hugo build successful"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-${{ matrix.template }}-${{ matrix.theme }}
        path: |
          test-build-${{ matrix.template }}/
          !test-build-${{ matrix.template }}/node_modules/
        retention-days: 7

  compatibility-test:
    name: Compatibility Test
    runs-on: ${{ matrix.os }}
    timeout-minutes: 25

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        node-version: ['16', '18', '20']

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run compatibility tests
      run: |
        echo "üß™ Testing compatibility on ${{ matrix.os }} with Node.js ${{ matrix.node-version }}"

        # Test CLI tools
        node scripts/validate.js --template minimal
        node scripts/list.js templates
        node scripts/diagnostic.js

        echo "‚úÖ Compatibility tests passed"

  security-test:
    name: Security Test
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: |
        echo "üîí Running security audit..."
        npm audit --audit-level moderate

    - name: Check for secrets
      run: |
        echo "üîç Checking for secrets..."
        if grep -r "password\|secret\|key" scripts/ --exclude-dir=node_modules || true; then
          echo "‚ö†Ô∏è Potential secrets found - please review"
        else
          echo "‚úÖ No obvious secrets found"
        fi

    - name: Validate file permissions
      run: |
        echo "üìã Checking file permissions..."
        find scripts/ -name "*.sh" -exec ls -la {} \;

        # Check that shell scripts are executable
        for script in scripts/*.sh; do
          if [ -f "$script" ] && [ ! -x "$script" ]; then
            echo "‚ùå Script not executable: $script"
            exit 1
          fi
        done

        echo "‚úÖ File permissions validated"

  docs-test:
    name: Documentation Test
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Check documentation completeness
      run: |
        echo "üìö Checking documentation..."

        # Check for README
        if [ ! -f "README.md" ]; then
          echo "‚ùå README.md not found"
          exit 1
        fi

        # Check for basic documentation files
        REQUIRED_DOCS=("README.md")
        for doc in "${REQUIRED_DOCS[@]}"; do
          if [ ! -f "$doc" ]; then
            echo "‚ùå Missing documentation: $doc"
            exit 1
          fi
        done

        echo "‚úÖ Documentation check passed"

    - name: Validate help commands
      run: |
        echo "‚ùì Testing help commands..."

        # Test help for all CLI tools
        bash scripts/build.sh --help
        node scripts/factory.js --help
        node scripts/validate.js --help
        node scripts/list.js --help
        node scripts/generate.js --help
        node scripts/diagnostic.js --help

        echo "‚úÖ Help commands working"

  performance-benchmark:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Setup Hugo
      uses: peaceiris/actions-hugo@v2
      with:
        hugo-version: ${{ env.HUGO_VERSION }}
        extended: true

    - name: Install dependencies
      run: npm ci

    - name: Run performance benchmarks
      run: |
        echo "‚ö° Running performance benchmarks..."
        npm test -- --selectProjects=performance --verbose

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: performance-benchmarks
        path: |
          test-results/
          coverage/
        retention-days: 90