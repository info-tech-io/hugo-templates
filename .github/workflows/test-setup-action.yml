name: Test Setup Build Environment Action

on:
  push:
    branches: [ feature/github-actions-optimization ]
    paths:
      - '.github/actions/setup-build-env/**'
      - '.github/workflows/test-setup-action.yml'
  workflow_dispatch:

jobs:
  test-setup-ubuntu:
    name: Test Setup on Ubuntu
    runs-on: ubuntu-latest
    timeout-minutes: 8

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Test basic setup
      uses: ./.github/actions/setup-build-env
      with:
        hugo-version: '0.148.0'
        node-version: '18'
        install-bats: 'false'

    - name: Verify installation
      run: |
        echo "🧪 Testing Hugo installation..."
        hugo version

        echo "🧪 Testing Node.js installation..."
        node --version
        npm --version

        echo "🧪 Testing basic Hugo functionality..."
        hugo new site test-site
        cd test-site
        echo 'baseURL = "http://localhost:1313"' > hugo.toml
        echo 'title = "Test Site"' >> hugo.toml
        hugo --minify --gc

        if [[ -f "public/index.html" ]]; then
          echo "✅ Hugo build test passed"
        else
          echo "❌ Hugo build test failed"
          exit 1
        fi

  test-setup-with-bats:
    name: Test Setup with BATS
    runs-on: ubuntu-latest
    timeout-minutes: 8

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Test setup with BATS
      uses: ./.github/actions/setup-build-env
      with:
        hugo-version: '0.148.0'
        node-version: '18'
        install-bats: 'true'

    - name: Verify BATS installation
      run: |
        echo "🧪 Testing BATS installation..."
        bats --version

        echo "🧪 Testing basic commands..."
        command -v hugo && echo "✓ Hugo available"
        command -v node && echo "✓ Node.js available"
        command -v npm && echo "✓ NPM available"
        echo "✅ BATS and commands test passed"

  test-caching:
    name: Test Caching Efficiency
    runs-on: ubuntu-latest
    timeout-minutes: 12

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: First run (should download and cache)
      id: first-run
      uses: ./.github/actions/setup-build-env
      with:
        hugo-version: '0.148.0'
        node-version: '18'

    - name: Second run (should use cache)
      id: second-run
      uses: ./.github/actions/setup-build-env
      with:
        hugo-version: '0.148.0'
        node-version: '18'

    - name: Verify both runs work
      run: |
        echo "🧪 Verifying cache efficiency..."
        hugo version
        node --version
        echo "✅ Cache test completed - both runs successful"

  test-performance:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    timeout-minutes: 12

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Benchmark setup time
      run: |
        echo "🏁 Starting performance benchmark..."
        start_time=$(date +%s)

    - name: Setup build environment
      uses: ./.github/actions/setup-build-env
      with:
        hugo-version: '0.148.0'
        node-version: '18'
        install-bats: 'true'

    - name: Calculate setup time
      run: |
        end_time=$(date +%s)
        setup_time=$((end_time - start_time))
        echo "⏱️ Setup completed in: ${setup_time} seconds"

        # Fail if setup takes longer than 300 seconds (5 minutes)
        if [[ $setup_time -gt 300 ]]; then
          echo "❌ Setup too slow: ${setup_time}s > 300s"
          exit 1
        else
          echo "✅ Performance test passed: ${setup_time}s ≤ 300s"
        fi

    - name: Test build performance
      run: |
        echo "🏗️ Testing build performance..."
        build_start=$(date +%s)

        # Create a test site
        hugo new site perf-test
        cd perf-test
        echo 'baseURL = "http://localhost:1313"' > hugo.toml
        echo 'title = "Performance Test"' >> hugo.toml

        # Add some content
        for i in {1..10}; do
          echo "---" > "content/post${i}.md"
          echo "title: 'Test Post ${i}'" >> "content/post${i}.md"
          echo "---" >> "content/post${i}.md"
          echo "# Test content for post ${i}" >> "content/post${i}.md"
        done

        # Build the site
        hugo --minify --gc

        build_end=$(date +%s)
        build_time=$((build_end - build_start))
        echo "🏗️ Build completed in: ${build_time} seconds"

        # Check output
        if [[ -f "public/index.html" ]] && [[ $(find public -name "*.html" | wc -l) -gt 10 ]]; then
          echo "✅ Build performance test passed"
        else
          echo "❌ Build performance test failed"
          ls -la public/
          exit 1
        fi